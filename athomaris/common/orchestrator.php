<?php

  /* Copyright (C) 2008 Thomas Schoebel-Theuer (ts@athomux.net)
   * 
   * This program is free software; you can redistribute it and/or modify
   * it under the terms of the GNU General Public License as published by
   * the Free Software Foundation; either version 2 of the License, or
   * (at your option) any later version.
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program; if not, write to the Free Software
   * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
   */

require_once("$BASEDIR/../common/app.php");


/* Default "built-in" continuation actions, used as
 * last-resort fallback if the user forgets to define them.
 */
$APPEND = 
  array(
	array(
	      "cont_match" => "/\ASTART (-?[0-9]+) (.*)\Z/",
	      "cont_action" => "",
	      "cont_endvalue" => "", // currently does nothing
	      ),
	array(
	      "cont_match" => "/\ASTATUS 0\Z/",
	      "cont_action" => "",
	      "cont_endvalue" => "+ 2",
	      ),
	array(
	      "cont_match" => "/\ASTATUS (-?[0-9]+)\Z/",
	      "cont_action" => "",
	      "cont_endvalue" => "+ -2",
	      ),
	array(
	      "cont_match" => "/\AINSERT (-?[0-9]+)\Z/",
	      "cont_action" => "",
	      "cont_endvalue" => "+ 2",
	      ),
	array(
	      "cont_match" => "/\ATIMEOUT (-?[0-9]+)\Z/",
	      "cont_action" => "",
	      "cont_endvalue" => "+ -1",
	      ),
);

/* Engine compiler:
 * For performance reasons, query the database for all existing rules
 * and continuations and produce a php data structure out of it.
 * Loading this at runtime is faster by magnitudes.
 */
function compile_engine() {
  global $BASEDIR;
  global $APPEND;

  $order = "bp_name,rule_prio";
  $data = db_read("rules,bps", null, array(), $order, 0, 0);

  $table = array();
  foreach($data as $def) {
    $bp_name = $def["bp_name"];
    $rule_prio = $def["rule_prio"];
    $statefield = $def["bp_statefield"];
    $def["rule_condition"] = split("/\s*/\n\s*/", $def["rule_condition"]);
    $def["rule_action"] = split("/\s*/\n\s*/", $def["rule_action"]);
    if(!$statefield) { // use default: bpstates
      //...
      die("NYI\n");
    }
    $startvalue = $def["rule_startvalue"];
    echo "compiling business process '$bp_name' prio $rule_prio: acts on $statefield<br>\n";

    $subcond = array("bp_name" => $bp_name, "rule_prio" => $rule_prio);
    $subdata = db_read("conts", null, $subcond, "cont_prio", 0, 0);
    foreach($subdata as $subidx => $subdef) {
      $subdata[$subidx]["cont_action"] = split("/\s*/\n\s*/", $subdef["cont_action"]);
    }
    $def["CONTI"] = array_merge($subdata, $APPEND);

    $table[$statefield][] = $def;
  }

  echo "done.<br>\n";

  $code = "<?php // this file was automatically generated by the engine compiler from database tables.\n\n// ====> DO NOT EDIT! <===\n\n";
  $code .= "\$ENGINE =\n" . db_data_to_code($table);
  $code .= "\n\n?>\n";

  $outname = "$BASEDIR/compiled/engine_table.php";
  $tmpname = "$outname.tmp";
  $fp = fopen($tmpname, "w");
  if(!$fp) {
    die("cannot create file '$outname'\n");
  }
  $len = fwrite($fp, $code);
  if($len != strlen($code)) {
    die("cannot write temporary file '$tmpname'\n");
  }
  fclose($fp);
  rename($tmpname, $outname);
}

compile_engine();

?>
